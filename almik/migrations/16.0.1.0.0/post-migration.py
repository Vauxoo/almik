import logging

from psycopg2.extensions import AsIs

from odoo import tools

_logger = logging.getLogger(__name__)

MODELS_TO_DELETE = (
    "ir.actions.act_url",
    "ir.actions.act_window",
    "ir.actions.act_window_close",
    "ir.actions.act_window.view",
    "ir.actions.client",
    "ir.actions.report",
    "ir.actions.server",
    "ir.actions.todo",
    "ir.actions.url",
    "ir.actions.wizard",
    "ir.cron",
    "ir.model",
    "ir.model.access",
    "ir.model.fields",
    "ir.model.fields.selection",
    "ir.property",
    "ir.rule",
    "ir.sequence",
    "ir.ui.menu",
    "ir.ui.view",
    "res.groups",
)


def migrate(cr, version):
    remove_uncertified_data(cr)
    remove_all_assets(cr)
    move_attachment_from_account_payment_to_account_move(cr)
    create_missing_edi_documents_for_moves(cr)


def model_to_table(model):
    """Convert model name to database table name

    Get a table name according to a model name In case the table name is set on the model
    itself (using _table), in which case it would be different from the autogenerated one
    that replaces "." by "_".
    """
    model_table_map = {
        "ir.actions.actions": "ir_actions",
        "ir.actions.act_url": "ir_act_url",
        "ir.actions.act_window_close": "ir_actions",
        "ir.actions.act_window": "ir_act_window",
        "ir.actions.act_window.view": "ir_act_window_view",
        "ir.actions.client": "ir_act_client",
        "ir.actions.report": "ir_act_report_xml",
        "ir.actions.server": "ir_act_server",
    }
    tablename = model_table_map.get(model, model.replace(".", "_"))
    return tablename


def remove_uncertified_data(cr):
    """Remove data from models marked to be removed that are not referenced by any installed module"""
    _logger.info("Removing uncertified data")

    # Determine data to remove
    cr.execute(
        """
        WITH installed_module AS (
            SELECT
                name
            FROM
                ir_module_module
            WHERE
                state IN ('installed', 'to install', 'to upgrade')
        ),
        record_to_delete AS (
            SELECT
                model,
                res_id
            FROM
                ir_model_data AS imd
            LEFT OUTER JOIN
                installed_module AS module
                ON imd.module = module.name
            WHERE
                model IN %s
                -- Exclude modules of type __export__
                AND module not like '\\_\\_%%\\_\\_'
            GROUP BY
                model,
                res_id
            HAVING
                COUNT(module.name) = 0
        )
        SELECT
            model,
            ARRAY_AGG(res_id ORDER BY res_id DESC) AS res_ids
        FROM
            record_to_delete
        GROUP BY
            model;
        """,
        [MODELS_TO_DELETE],
    )
    data_to_delete = cr.fetchall()
    for model, res_ids in data_to_delete:
        res_ids = tuple(res_ids)
        if model == "ir.actions.server":
            cr.execute("DELETE FROM ir_cron WHERE ir_actions_server_id IN %s RETURNING id;", [res_ids])
            remove_external_ids(cr, "ir.cron")
            if tools.table_exists(cr, "base_automation"):
                cr.execute("DELETE FROM base_automation WHERE action_server_id IN %s RETURNING id;", [res_ids])
                remove_external_ids(cr, "base.automation")

        # Remove records
        table = model_to_table(model)
        cr.execute("DELETE FROM %s WHERE id IN %s;", [AsIs(table), res_ids])
        num_removed_records = cr.rowcount
        remove_external_ids(cr, model, res_ids)
        _logger.info("Removed %d records from model %s", num_removed_records, model)


def remove_external_ids(cr, model, res_ids=None):
    if res_ids is None:
        # Take IDs from records just deleted
        res_ids = tuple(x[0] for x in cr.fetchall())
    if not res_ids:
        return
    cr.execute(
        """
        DELETE FROM
            ir_model_data
        WHERE
            model = %s
            AND res_id IN %s;
        """,
        [model, res_ids],
    )


def remove_all_assets(cr):
    """Remove all assets (``ir.asset``) records

    In previous versions, assets were defined in QWeb templates. During migration, Odoo moves them to
    asset records. Problem is, some of them are outdated ot belong to non-existing modules.
    """
    cr.execute("DELETE FROM ir_asset RETURNING id;")
    remove_external_ids(cr, "ir.asset")


def move_attachment_from_account_payment_to_account_move(cr):
    """Move attachments from payments to their related journal entry

    Currently, when a payment complement is generated, the XML is attached to the related journal entry.
    In previous versions, when the payment model didn't inherit from account.move, the XML was attached
    to the payment itself.

    Problem is, Odoo doesn't move old payment's attachments to their related journal entry, and some modules
    require the attachment to be in the entry (as natively done for new ones).

    Note:
    When payment's attachments are reviewed functionally, they also include journal entry's ones, so when
    opening the payment, there shouldn't be any difference.
    """
    cr.execute(
        """
        UPDATE
            ir_attachment AS attachment
        SET
            res_model = 'account.move',
            res_id = payment.move_id
        FROM
            account_payment AS payment
        WHERE
            attachment.res_model = 'account.payment'
            AND attachment.res_id = payment.id
        """
    )
    _logger.info("%d attachments were moved from account.payment to account.move", cr.rowcount)


def create_missing_edi_documents_for_moves(cr):
    """Create EDI documents (account.edi.document) for moves

    The migration process of Odoo is not creating the EDI documents for different kind of moves (eg. entries
    from payments, invoices and credit notes of suppliers) and it is required creating the EDI documents for
    mexican localization purposes, example, do not remove the attachment of signed invoices.
    """
    cr.execute(
        """
        WITH edi_format AS (
            SELECT
                res_id AS id
            FROM
                ir_model_data
            WHERE
                module = 'l10n_mx_edi'
                AND name = 'edi_cfdi_3_3'
        ), orphan_attachment AS (
            SELECT
                document.id AS edi_document_id,
                MAX(attachment.id) AS attachment_id,
                attachment.res_id AS move_id
            FROM
                ir_attachment AS attachment
            LEFT OUTER JOIN
                account_edi_document AS document
                ON
                    attachment.id = document.attachment_id
            WHERE
                attachment.name LIKE '%.xml'
                AND attachment.res_model = 'account.move'
            GROUP BY
                attachment.res_id,
                document.id
            HAVING
                document.id IS NULL
        )
        INSERT INTO account_edi_document (
            move_id,
            edi_format_id,
            attachment_id,
            state,
            create_uid,
            create_date,
            write_uid,
            write_date
        )
        SELECT
            orphan.move_id,
            format.id AS edi_format_id,
            orphan.attachment_id,
            CASE
                WHEN move.l10n_mx_edi_sat_status = 'cancelled'
                THEN 'cancelled'
                ELSE 'sent'
            END AS state,
            1 AS create_uid,
            NOW() AT TIME ZONE 'UTC' AS create_date,
            1 AS write_uid,
            NOW() AT TIME ZONE 'UTC' AS write_date
        FROM
            orphan_attachment AS orphan
        INNER JOIN
            account_move AS move
            ON
                orphan.move_id = move.id
        CROSS JOIN
            edi_format AS format
        WHERE
            move.state = 'posted'
        ON CONFLICT(edi_format_id, move_id)
            DO NOTHING
        """
    )
    _logger.info("Created %d documents for moves", cr.rowcount)
